// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ports.sql

package db

import (
	"context"
)

const createPlayerIsland = `-- name: CreatePlayerIsland :one
INSERT INTO ports (player_id, name, x, y, island_type, starting_resources_initialized)
VALUES ($1, $2, $3, $4, 'tropical', TRUE)
RETURNING id, player_id, name, x, y, created_at, island_type, starting_resources_initialized
`

type CreatePlayerIslandParams struct {
	PlayerID int32
	Name     string
	X        int32
	Y        int32
}

func (q *Queries) CreatePlayerIsland(ctx context.Context, arg CreatePlayerIslandParams) (Port, error) {
	row := q.db.QueryRow(ctx, createPlayerIsland,
		arg.PlayerID,
		arg.Name,
		arg.X,
		arg.Y,
	)
	var i Port
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.CreatedAt,
		&i.IslandType,
		&i.StartingResourcesInitialized,
	)
	return i, err
}

const createPort = `-- name: CreatePort :one
INSERT INTO ports (player_id, name, x, y)
VALUES ($1, $2, $3, $4)
RETURNING id, player_id, name, x, y, created_at, island_type, starting_resources_initialized
`

type CreatePortParams struct {
	PlayerID int32
	Name     string
	X        int32
	Y        int32
}

func (q *Queries) CreatePort(ctx context.Context, arg CreatePortParams) (Port, error) {
	row := q.db.QueryRow(ctx, createPort,
		arg.PlayerID,
		arg.Name,
		arg.X,
		arg.Y,
	)
	var i Port
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.CreatedAt,
		&i.IslandType,
		&i.StartingResourcesInitialized,
	)
	return i, err
}

const getPortById = `-- name: GetPortById :one
SELECT id, player_id, name, x, y, created_at, island_type, starting_resources_initialized FROM ports WHERE id = $1
`

func (q *Queries) GetPortById(ctx context.Context, id int32) (Port, error) {
	row := q.db.QueryRow(ctx, getPortById, id)
	var i Port
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.CreatedAt,
		&i.IslandType,
		&i.StartingResourcesInitialized,
	)
	return i, err
}

const getPortByPlayerId = `-- name: GetPortByPlayerId :one
SELECT id, player_id, name, x, y, created_at, island_type, starting_resources_initialized FROM ports WHERE player_id = $1
`

func (q *Queries) GetPortByPlayerId(ctx context.Context, playerID int32) (Port, error) {
	row := q.db.QueryRow(ctx, getPortByPlayerId, playerID)
	var i Port
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.CreatedAt,
		&i.IslandType,
		&i.StartingResourcesInitialized,
	)
	return i, err
}
