// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: factions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllFactions = `-- name: GetAllFactions :many
SELECT id, name FROM factions ORDER BY id
`

func (q *Queries) GetAllFactions(ctx context.Context) ([]Faction, error) {
	rows, err := q.db.Query(ctx, getAllFactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Faction
	for rows.Next() {
		var i Faction
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFactionByID = `-- name: GetFactionByID :one
SELECT id, name FROM factions WHERE id = $1
`

func (q *Queries) GetFactionByID(ctx context.Context, id int32) (Faction, error) {
	row := q.db.QueryRow(ctx, getFactionByID, id)
	var i Faction
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getFactionByName = `-- name: GetFactionByName :one
SELECT id, name FROM factions WHERE name = $1
`

func (q *Queries) GetFactionByName(ctx context.Context, name string) (Faction, error) {
	row := q.db.QueryRow(ctx, getFactionByName, name)
	var i Faction
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPlayerWithFaction = `-- name: GetPlayerWithFaction :one
SELECT 
    p.id,
    p.email,
    p.display_name,
    p.faction,
    p.created_at,
    p.user_id,
    f.name as faction_name
FROM players p
JOIN factions f ON p.faction = f.id
WHERE p.id = $1
`

type GetPlayerWithFactionRow struct {
	ID          int32
	Email       string
	DisplayName string
	Faction     int32
	CreatedAt   pgtype.Timestamptz
	UserID      pgtype.Int4
	FactionName string
}

func (q *Queries) GetPlayerWithFaction(ctx context.Context, id int32) (GetPlayerWithFactionRow, error) {
	row := q.db.QueryRow(ctx, getPlayerWithFaction, id)
	var i GetPlayerWithFactionRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.Faction,
		&i.CreatedAt,
		&i.UserID,
		&i.FactionName,
	)
	return i, err
}

const updatePlayerFaction = `-- name: UpdatePlayerFaction :exec
UPDATE players 
SET faction = $1
WHERE id = $2
`

type UpdatePlayerFactionParams struct {
	Faction int32
	ID      int32
}

func (q *Queries) UpdatePlayerFaction(ctx context.Context, arg UpdatePlayerFactionParams) error {
	_, err := q.db.Exec(ctx, updatePlayerFaction, arg.Faction, arg.ID)
	return err
}
