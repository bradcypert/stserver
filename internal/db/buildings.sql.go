// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: buildings.sql

package db

import (
	"context"
)

const createBuilding = `-- name: CreateBuilding :one
INSERT INTO buildings (port_id, type)
VALUES ($1, $2)
RETURNING id, port_id, type, level, created_at
`

type CreateBuildingParams struct {
	PortID int32
	Type   string
}

func (q *Queries) CreateBuilding(ctx context.Context, arg CreateBuildingParams) (Building, error) {
	row := q.db.QueryRow(ctx, createBuilding, arg.PortID, arg.Type)
	var i Building
	err := row.Scan(
		&i.ID,
		&i.PortID,
		&i.Type,
		&i.Level,
		&i.CreatedAt,
	)
	return i, err
}

const getBuilding = `-- name: GetBuilding :one
SELECT id, port_id, type, level, created_at FROM buildings WHERE id = $1
`

func (q *Queries) GetBuilding(ctx context.Context, id int32) (Building, error) {
	row := q.db.QueryRow(ctx, getBuilding, id)
	var i Building
	err := row.Scan(
		&i.ID,
		&i.PortID,
		&i.Type,
		&i.Level,
		&i.CreatedAt,
	)
	return i, err
}

const getBuildingByPortAndType = `-- name: GetBuildingByPortAndType :one
SELECT id, port_id, type, level, created_at FROM buildings WHERE port_id = $1 AND type = $2
`

type GetBuildingByPortAndTypeParams struct {
	PortID int32
	Type   string
}

func (q *Queries) GetBuildingByPortAndType(ctx context.Context, arg GetBuildingByPortAndTypeParams) (Building, error) {
	row := q.db.QueryRow(ctx, getBuildingByPortAndType, arg.PortID, arg.Type)
	var i Building
	err := row.Scan(
		&i.ID,
		&i.PortID,
		&i.Type,
		&i.Level,
		&i.CreatedAt,
	)
	return i, err
}

const getBuildingsByPort = `-- name: GetBuildingsByPort :many
SELECT id, port_id, type, level, created_at FROM buildings WHERE port_id = $1
`

func (q *Queries) GetBuildingsByPort(ctx context.Context, portID int32) ([]Building, error) {
	rows, err := q.db.Query(ctx, getBuildingsByPort, portID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Building
	for rows.Next() {
		var i Building
		if err := rows.Scan(
			&i.ID,
			&i.PortID,
			&i.Type,
			&i.Level,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBuilding = `-- name: UpdateBuilding :one
UPDATE buildings
SET level = $2
WHERE id = $1
RETURNING id, port_id, type, level, created_at
`

type UpdateBuildingParams struct {
	ID    int32
	Level int32
}

func (q *Queries) UpdateBuilding(ctx context.Context, arg UpdateBuildingParams) (Building, error) {
	row := q.db.QueryRow(ctx, updateBuilding, arg.ID, arg.Level)
	var i Building
	err := row.Scan(
		&i.ID,
		&i.PortID,
		&i.Type,
		&i.Level,
		&i.CreatedAt,
	)
	return i, err
}
