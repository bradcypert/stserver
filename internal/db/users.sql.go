// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, email_verification_token, email_verification_expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, email, password_hash, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type CreateUserParams struct {
	Email                      string
	PasswordHash               string
	EmailVerificationToken     pgtype.Text
	EmailVerificationExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.EmailVerificationToken,
		arg.EmailVerificationExpiresAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByVerificationToken = `-- name: GetUserByVerificationToken :one
SELECT id, email, password_hash, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users WHERE email_verification_token = $1
`

func (q *Queries) GetUserByVerificationToken(ctx context.Context, emailVerificationToken pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByVerificationToken, emailVerificationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlayerUserID = `-- name: UpdatePlayerUserID :exec
UPDATE players 
SET user_id = $1
WHERE id = $2
`

type UpdatePlayerUserIDParams struct {
	UserID pgtype.Int4
	ID     int32
}

func (q *Queries) UpdatePlayerUserID(ctx context.Context, arg UpdatePlayerUserIDParams) error {
	_, err := q.db.Exec(ctx, updatePlayerUserID, arg.UserID, arg.ID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users 
SET password_hash = $1, 
    updated_at = NOW()
WHERE id = $2
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	ID           int32
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	return err
}

const verifyUserEmail = `-- name: VerifyUserEmail :exec
UPDATE users 
SET email_verified = TRUE, 
    email_verification_token = NULL, 
    email_verification_expires_at = NULL,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) VerifyUserEmail(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, verifyUserEmail, id)
	return err
}
